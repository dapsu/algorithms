const fibonacci = (num) => {
    // 주어지는 숫자가 0, 1, 2일 때의 요소는 0, 1, 1로 고정
    let dp = [0, 1, 1];

    // dp를 활용하여 반복문을 통해 피보나치 수열 생성 
    for (let i = 3; i <= num; i++) {
        dp[i] = dp[i-1] + dp[i-2];
    }

    return dp[num]; 
}

// console.log(fibonacci(10));

/** 문제 해설
피보나치 수열은 앞의 두 항의 합인 수열이다. 문제에서 나온 것처럼
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144... 이렇게 수열이 진행된다.
이를 알고리즘으로 해결하기 위해서는 점화식 F(n) = F(n-1) + F(n-2)로 정의된다.
이 점화식은 재귀적으로 해결할 수도 있지만, 단순하게 재귀로 이용해서 문제를
풀 시, 시간 복잡도는 O(2^N)이 되기 때문에 효율적이지 못한 코드가 된다.
이를 DP를 이용해서 해결하게 되면 시간 복잡도는 O(N)으로 단순 재귀보다 
훨씬 효율적으로 알고리즘을 풀 수 있다.

 */
const fs = require('fs');
const input = fs.readFileSync('../../input.txt').toString().replace(/\r/g, '').split('\n');

const [N, M] = input.shift().split(' ').map(e => Number(e));
const board = input.map(e => e.split(' ').map(e => Number(e)));

const cases = {
    // ****
    1: [
        [0, 0],
        [0, 1],
        [0, 2],
        [0, 3],
    ],
    // *
    // *
    // *
    // *
    2: [
        [0, 0],
        [1, 0],
        [2, 0],
        [3, 0],
    ],
    // **
    // **
    3: [
        [0, 0],
        [0, 1],
        [1, 0],
        [1, 1],
    ],
    // *
    // *
    // **
    4: [
        [0, 0],
        [1, 0],
        [2, 0],
        [2, 1],
    ],
    //   *
    // ***
    5: [
        [0, 2],
        [1, 0],
        [1, 1],
        [1, 2],
    ],
    // **
    //  *
    //  *
    6: [
        [0, 0],
        [0, 1],
        [1, 1],
        [2, 1],
    ],
    // ***
    // *
    7: [
        [0, 0],
        [0, 1],
        [0, 2],
        [1, 0],
    ],
    // *
    // **
    //  *
    8: [
        [0, 0],
        [1, 0],
        [1, 1],
        [2, 1],
    ],
    //  **
    // **
    9: [
        [0, 1],
        [0, 2],
        [1, 0],
        [1, 1],
    ],
    // ***
    //  *
    10: [
        [0, 0],
        [0, 1],
        [0, 2],
        [1, 1],
    ],
    // *
    // **
    // *
    11: [
        [0, 0],
        [1, 0],
        [1, 1],
        [2, 0],
    ],
    //  *
    // ***
    12: [
        [0, 1],
        [1, 0],
        [1, 1],
        [1, 2],
    ],
    //  *
    // **
    //  *
    13: [
        [0, 1],
        [1, 0],
        [1, 1],
        [2, 1],
    ],
    //  *
    //  *
    // **
    14: [
        [0, 1],
        [1, 1],
        [2, 0],
        [2, 1],
    ],
    // *
    // ***
    15: [
        [0, 0],
        [1, 0],
        [1, 1],
        [1, 2],
    ],
    // **
    // *
    // *
    16: [
        [0, 0],
        [0, 1],
        [1, 0],
        [2, 0],
    ],
    // ***
    //   *
    17: [
        [0, 0],
        [0, 1],
        [0, 2],
        [1, 2],
    ],
    //  *
    // **
    // *
    18: [
        [0, 1],
        [1, 0],
        [1, 1],
        [2, 0],
    ],
    // **
    //  **
    19: [
        [0, 0],
        [0, 1],
        [1, 1],
        [1, 2],
    ],
};
let max = 0;
let sum, x, y;
for (let i = 0; i < N; i++) {
    for (let j = 0; j < M; j++) {
        for (const blocks of Object.values(cases)) {
            sum = 0;
            for (let k = 0; k < 4; k++) {
                [y, x] = blocks[k];
                if (y + i < N && x + j < M) {
                    sum += board[y + i][x + j];
                }
            }
            max = Math.max(max, sum);
        }
    }
}

console.log(max);